
params:
  - param_name: cluster_template_name
    param_type: str
    param_desc: >
      The name of this cluster template. The cluster name will be
      ${CLUSTER_TEMPLATE_NAME}-${NODE_COUNT}node-cluster${CLUSTER_ID}.
      Often includes instance type, region/az, description of AMI. Should
      not include number of nodes, e.g. p3.16xl-us-east-1f-DLAMI-20.0

  - param_name: cluster_id
    param_type: int
    param_desc: >
      The cluster id. Use this to create identical clusters without namespace collisions

  - param_name: region
    param_type: str
    param_desc: The region that the VPC is in

  - param_name: vpc_id
    param_type: str
    param_desc: The id of the vpc. e.g. 'vpc-09fe736b3807bbecf'

  - param_name: subnet_id
    param_type: str
    param_desc: The id of the subnet. e.g. 'subnet-016dd4822d0e200b1'.

  - param_name: ami_id
    param_type: str
    param_desc: The id of the AMI, e.g. 'ami-0b294f219d14e6a82'

  - param_name: ebs_snapshot_id
    param_type: str
    param_desc: >
      The id of the EBS snapshot associated with the AMI, e.g. 'snap-013f2dc8c2ecc97d9'.
      If you use the AWS console EC2 launch wizard and choose the above AMI, the associated
      snapshot id will be displayed on step four of the wizard (Step 4. Add Storage)

  - param_name: username
    param_type: str
    param_desc: The username associated with the OS of the AMI, e.g. 'ubuntu' or 'ec2-user'

  - param_name: ebs_optimized
    param_type: bool
    param_desc: >
      Whether or not the instance is EBS optimized. By default this is true, which is the
      correct value for most instance types. For some instances, e.g. t2.micro, this needs
      to be set to false. Always leave this as True unless you get errors saying 'EBS-optimized instances are not
      supported for your requested configuration'

  - param_name: volume_type
    param_type: str
    param_desc: The type of the EBS volume. 'gp2', 'io1', etc.

  - param_name: iops
    param_type: int
    param_desc: If using 'io1' EBS type, the number of IOPS to provision.

  - param_name: volume_gbs
    param_type: int
    param_desc: The size of the EBS volume to provision (in Gigabytes)

  - param_name: instance_type
    param_type: str
    param_desc: The API name of the desired instance type, e.g. 'p3.16xlarge' or 't2.micro'. Note - '16xlarge', not '16xl'

  - param_name: node_count
    param_type: int
    param_desc: The number of nodes to have in the cluster

  - param_name: iam_ec2_role_name
    param_type: str
    param_desc: The name of the IAM role to be attached to the nodes

  - param_name: key_name
    param_type: str
    param_desc: The name of the EC2 KeyPair

  - param_name: security_group_ids
    param_type: list
    param_desc: >
      A list of security groups to attach. If not defined in config.yaml or command
      line arg, no additional security groups are attached. This is always one
      security group created to allow communication between nodes in the cluster

  - param_name: cluster_create_timeout_secs
    param_type: float
    param_desc: >
      Defines how long the cluster waits when there is insufficient EC2 capacity.
      The cluster will timeout if this many seconds go by without increasing the
      size of the cluster. It is NOT the max amount of time the command will run
      before failing. Here, the counter resets every time the cluster acquires a
      new node. Theoretically the max time the command can run is
      num_nodes*cluster_create_timeout_secs. Set as None to have no timeout. None
      can be either 'None' as a string or the Python type None.


  - param_name: additional_tags
    param_type: list
    param_desc: >
      Additional tags to attach to the instances. Should be list of dicts in format
      [{'Key': key1, 'Value': val1}, {'Key': key2, 'Value': val2}]. Key=Name is reserved.

  - param_name: placement_group
    param_type: bool
    param_desc: Whether or not to launch cluster in a placement group

